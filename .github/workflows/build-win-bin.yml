name: Build Hadoop on Windows (Artifacts Repository)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      hadoop_repo:
        description: 'Hadoop repository URL'
        required: false
        default: 'https://github.com/apache/hadoop.git'
      hadoop_branch:
        description: 'Hadoop branch/tag to build'
        required: false
        default: 'trunk'
      build_type:
        description: 'Build type'
        required: false
        default: 'release'
        type: choice
        options:
          - release
          - snapshot
      skip_tests:
        description: 'Skip tests during build'
        required: false
        default: true
        type: boolean
      java_version:
        description: 'Java version to use'
        required: false
        default: '11'
        type: choice
        options:
          - '8'
          - '11'
          - '17'
          - '21'

env:
  # Build Configuration
  HADOOP_REPO: ${{ github.event.inputs.hadoop_repo || 'https://github.com/apache/hadoop.git' }}
  HADOOP_BRANCH: ${{ github.event.inputs.hadoop_branch || 'trunk' }}
  BUILD_TYPE: ${{ github.event.inputs.build_type || 'release' }}
  SKIP_TESTS: ${{ github.event.inputs.skip_tests || 'true' }}
  JAVA_VERSION: ${{ github.event.inputs.java_version || '11' }}
  
  # Dependency Versions
  MAVEN_VERSION: '3.9.6'
  BOOST_VERSION: '1.84.0'
  PROTOBUF_VERSION: '3.21.12'
  CMAKE_VERSION: '3.28.0'
  VCPKG_COMMIT: '2024.01.12'
  ZLIB_VERSION: '1.3'
  
  # Build Paths
  HADOOP_BUILD_DIR: 'C:\hadoop-build'
  MAVEN_OPTS: '-Xmx4096M -Xss256M'

jobs:
  validate-inputs:
    runs-on: ubuntu-latest
    outputs:
      is-valid: ${{ steps.validate.outputs.is-valid }}
    steps:
    - name: Validate Workflow Inputs
      id: validate
      run: |
        set -e
        
        # Validate repository URL format
        REPO="${{ env.HADOOP_REPO }}"
        if [[ ! "$REPO" =~ ^https://github\.com/[a-zA-Z0-9_.-]+/[a-zA-Z0-9_.-]+\.git$ ]]; then
          echo "❌ Invalid repository URL format: $REPO"
          echo "Must be a valid GitHub repository URL ending with .git"
          exit 1
        fi
        
        # Validate branch name (basic check)
        BRANCH="${{ env.HADOOP_BRANCH }}"
        if [[ ! "$BRANCH" =~ ^[a-zA-Z0-9/_.-]+$ ]]; then
          echo "❌ Invalid branch name: $BRANCH"
          exit 1
        fi
        
        echo "✅ All inputs validated successfully"
        echo "Repository: $REPO"
        echo "Branch: $BRANCH"
        echo "Java Version: ${{ env.JAVA_VERSION }}"
        echo "Build Type: ${{ env.BUILD_TYPE }}"
        echo "Skip Tests: ${{ env.SKIP_TESTS }}"
        
        echo "is-valid=true" >> $GITHUB_OUTPUT

  build-hadoop-windows:
    runs-on: windows-latest
    needs: validate-inputs
    if: needs.validate-inputs.outputs.is-valid == 'true'
    timeout-minutes: 180
    
    steps:
    - name: Checkout Artifacts Repository
      uses: actions/checkout@v4
      with:
        path: artifacts-repo

    - name: Configure Windows Environment
      run: |
        Write-Host "=== Configuring Windows Build Environment ==="
        
        # Enable long path support for Git
        git config --global core.longpaths true
        git config --global core.autocrlf false
        git config --global core.preloadindex true
        git config --global core.fscache true
        
        Write-Host "✅ Git configuration completed"
        
        # Test path length support
        $testPath = "${{ env.HADOOP_BUILD_DIR }}\very-long-test-directory-name-to-verify-path-length-support"
        try {
          New-Item -ItemType Directory -Path $testPath -Force -ErrorAction Stop
          Write-Host "✅ Long path support verified"
          Remove-Item -Path $testPath -Force -ErrorAction SilentlyContinue
        } catch {
          Write-Host "⚠️ Long path support limited: $($_.Exception.Message)"
        }

    - name: Prepare Build Directory
      run: |
        Write-Host "=== Preparing Build Directory ==="
        
        $buildDir = "${{ env.HADOOP_BUILD_DIR }}"
        
        # Clean existing directory
        if (Test-Path $buildDir) {
          Write-Host "Cleaning existing directory: $buildDir"
          Remove-Item -Recurse -Force $buildDir -ErrorAction SilentlyContinue
        }
        
        # Create fresh directory
        New-Item -ItemType Directory -Path $buildDir -Force
        Write-Host "✅ Build directory created: $buildDir"
        
        # Set reasonable permissions (not Everyone FullControl)
        try {
          $acl = Get-Acl $buildDir
          $currentUser = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name
          $accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule($currentUser, "FullControl", "Allow")
          $acl.SetAccessRule($accessRule)
          Set-Acl -Path $buildDir -AclObject $acl
          Write-Host "✅ Directory permissions configured for current user"
        } catch {
          Write-Host "⚠️ Could not set permissions: $($_.Exception.Message)"
        }

    - name: Clone Hadoop Repository
      run: |
        Write-Host "=== Cloning Hadoop Repository ==="
        
        $buildDir = "${{ env.HADOOP_BUILD_DIR }}"
        $repo = "${{ env.HADOOP_REPO }}"
        $branch = "${{ env.HADOOP_BRANCH }}"
        
        Write-Host "Repository: $repo"
        Write-Host "Branch: $branch"
        Write-Host "Target: $buildDir"
        
        try {
          # Use single, clean clone command
          git clone --depth 1 --branch $branch --single-branch $repo $buildDir
          
          Set-Location $buildDir
          
          # Verify clone success
          if (-not (Test-Path "pom.xml")) {
            throw "Repository clone failed - no pom.xml found"
          }
          
          $commit = git rev-parse HEAD
          Write-Host "✅ Repository cloned successfully"
          Write-Host "Commit: $commit"
          
          # Export environment variables
          echo "HADOOP_COMMIT=$commit" >> $env:GITHUB_ENV
          echo "HADOOP_SOURCE_DIR=$buildDir" >> $env:GITHUB_ENV
          
        } catch {
          Write-Host "❌ Clone failed: $($_.Exception.Message)"
          throw
        }

    - name: Get Hadoop Version
      working-directory: ${{ env.HADOOP_SOURCE_DIR }}
      run: |
        Write-Host "=== Getting Hadoop Version ==="
        
        $version = $null
        $ErrorActionPreference = 'Continue'
        
        # Try Maven first
        try {
          Write-Host "Attempting Maven version evaluation..."
          $versionOutput = mvn help:evaluate -Dexpression=project.version -q -DforceStdout -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn 2>$null
          
          # Extract just the version line (should be simple text, not XML)
          if ($versionOutput) {
            $version = $versionOutput | Where-Object { $_ -match '^\d+\.\d+\.\d+' } | Select-Object -First 1
          }
        } catch {
          Write-Host "Maven evaluate command failed: $($_.Exception.Message)"
        }
        
        # Fallback: parse pom.xml directly
        if ([string]::IsNullOrWhiteSpace($version) -or $version.Contains('<')) {
          Write-Host "Maven evaluate failed, parsing pom.xml directly..."
          
          try {
            if (Test-Path "pom.xml") {
              [xml]$pomContent = Get-Content "pom.xml" -ErrorAction Stop
              $version = $pomContent.project.version
              
              if ([string]::IsNullOrWhiteSpace($version)) {
                $version = $pomContent.project.parent.version
              }
            } else {
              throw "pom.xml not found"
            }
          } catch {
            Write-Host "Failed to parse pom.xml: $($_.Exception.Message)"
          }
        }
        
        # Final fallback based on branch name
        if ([string]::IsNullOrWhiteSpace($version) -or $version.Contains('<')) {
          Write-Host "Using branch-based fallback version..."
          
          $branchName = "${{ env.HADOOP_BRANCH }}"
          if ($branchName -match "branch-(\d+\.\d+)") {
            $version = $matches[1] + ".0-SNAPSHOT"
          } elseif ($branchName -eq "trunk") {
            $version = "4.0.0-SNAPSHOT"
          } else {
            $version = "unknown-SNAPSHOT"
          }
        }
        
        # Clean up and validate final version
        $version = $version.Trim()
        
        if ([string]::IsNullOrWhiteSpace($version)) {
          Write-Host "❌ Could not determine Hadoop version"
          $version = "unknown-SNAPSHOT"
        }
        
        Write-Host "✅ Hadoop Version: $version"
        echo "HADOOP_VERSION=$version" >> $env:GITHUB_ENV
        
        # Ensure we exit successfully
        exit 0

    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Add Git Unix Tools to PATH
      run: |
        Write-Host "=== Adding Git Unix Tools to PATH ==="
        $gitBinPath = "C:\Program Files\Git\bin"
        $gitUsrBinPath = "C:\Program Files\Git\usr\bin"
        
        echo $gitBinPath | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        echo $gitUsrBinPath | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        
        Write-Host "✅ Git Unix tools added to PATH"

    - name: Set up MSBuild
      uses: microsoft/setup-msbuild@v2

    - name: Set up MSVC Development Environment
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64
        toolset: 14.40  # VS 2022

    - name: Cache vcpkg Dependencies
      uses: actions/cache@v4
      id: cache-vcpkg
      with:
        path: |
          C:\vcpkg
        key: ${{ runner.os }}-vcpkg-${{ env.VCPKG_COMMIT }}-${{ env.BOOST_VERSION }}-${{ env.PROTOBUF_VERSION }}-${{ env.ZLIB_VERSION }}
        restore-keys: |
          ${{ runner.os }}-vcpkg-${{ env.VCPKG_COMMIT }}-

    - name: Install vcpkg and Native Dependencies
      if: steps.cache-vcpkg.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        echo === Installing vcpkg and Dependencies ===
        
        cd C:\
        if exist vcpkg rmdir /s /q vcpkg
        
        git clone https://github.com/microsoft/vcpkg.git
        cd vcpkg
        git checkout %VCPKG_COMMIT%
        
        call bootstrap-vcpkg.bat
        if errorlevel 1 exit /b 1
        
        REM Create vcpkg.json for dependencies
        echo {^
          "name": "hadoop-dependencies",^
          "version": "1.0.0",^
          "dependencies": [^
            "boost-system",^
            "boost-filesystem",^
            "boost-thread",^
            "boost-iostreams",^
            "protobuf",^
            "openssl",^
            "zlib"^
          ]^
        } > vcpkg.json
        
        vcpkg install --x-install-root=.\installed
        if errorlevel 1 exit /b 1
        
        echo ✅ vcpkg dependencies installed successfully

    - name: Cache Maven Dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ env.JAVA_VERSION }}-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-${{ env.JAVA_VERSION }}-
          ${{ runner.os }}-maven-

    - name: Configure Build Environment
      shell: cmd
      run: |
        echo === Configuring Build Environment ===
        
        REM Set vcpkg paths
        echo PROTOBUF_HOME=C:\vcpkg\installed\x64-windows>> %GITHUB_ENV%
        echo ZLIB_HOME=C:\vcpkg\installed\x64-windows>> %GITHUB_ENV%
        echo OPENSSL_ROOT_DIR=C:\vcpkg\installed\x64-windows>> %GITHUB_ENV%
        
        REM Maven configuration
        echo MAVEN_OPTS=%MAVEN_OPTS%>> %GITHUB_ENV%
        
        REM Windows build flag
        echo IS_WINDOWS=1>> %GITHUB_ENV%
        
        echo ✅ Environment variables configured

    - name: Verify Build Dependencies
      shell: cmd
      run: |
        echo === Verifying Build Dependencies ===
        
        echo Java Version:
        java -version
        echo.
        
        echo Maven Version:
        mvn --version
        echo.
        
        echo CMake Version:
        cmake --version
        echo.
        
        echo Git Version:
        git --version
        echo.
        
        echo Python Version:
        python --version
        echo.
        
        echo MSBuild Version:
        msbuild -version
        echo.
        
        echo Environment Variables:
        echo PROTOBUF_HOME=%PROTOBUF_HOME%
        echo ZLIB_HOME=%ZLIB_HOME%
        echo OPENSSL_ROOT_DIR=%OPENSSL_ROOT_DIR%
        echo MAVEN_OPTS=%MAVEN_OPTS%
        echo.
        
        REM Verify vcpkg installation
        if exist "C:\vcpkg\installed\x64-windows" (
          echo ✅ vcpkg dependencies found
          dir "C:\vcpkg\installed\x64-windows" /b
        ) else (
          echo ❌ vcpkg dependencies not found
          exit /b 1
        )

    - name: Build Hadoop
      shell: cmd
      working-directory: ${{ env.HADOOP_SOURCE_DIR }}
      run: |
        echo === Building Hadoop ===
        
        REM Clear any existing classpath
        set classpath=
        
        REM Configure test arguments
        if "%SKIP_TESTS%"=="true" (
          set TEST_ARGS=-DskipTests
        ) else (
          set TEST_ARGS=
        )
        
        REM Execute Maven build with comprehensive arguments
        mvn clean package ^
          -Dhttps.protocols=TLSv1.2 ^
          %TEST_ARGS% ^
          -DskipDocs ^
          -Pnative-win,dist ^
          -Dskip.platformToolsetDetection ^
          -Drequire.openssl ^
          -Drequire.test.libhadoop ^
          -Pyarn-ui ^
          -Dshell-executable="C:\Program Files\Git\bin\bash.exe" ^
          -Dtar ^
          -Dopenssl.prefix=C:\vcpkg\installed\x64-windows ^
          -Dcmake.prefix.path=C:\vcpkg\installed\x64-windows ^
          -Dwindows.cmake.toolchain.file=C:\vcpkg\scripts\buildsystems\vcpkg.cmake ^
          -Dwindows.cmake.build.type=RelWithDebInfo ^
          -Dwindows.build.hdfspp.dll=off ^
          -Dwindows.no.sasl=on ^
          -Duse.platformToolsetVersion=v143 ^
          -T v143
        
        if errorlevel 1 (
          echo ❌ Maven build failed
          exit /b 1
        )
        
        echo ✅ Hadoop build completed successfully

    - name: Run Tests
      shell: cmd
      working-directory: ${{ env.HADOOP_SOURCE_DIR }}
      if: env.SKIP_TESTS == 'false'
      run: |
        echo === Running Hadoop Tests ===
        
        mvn test ^
          -Pnative-win ^
          -Dskip.platformToolsetDetection ^
          -Drequire.openssl ^
          -Dopenssl.prefix=C:\vcpkg\installed\x64-windows ^
          -Dcmake.prefix.path=C:\vcpkg\installed\x64-windows ^
          -Dwindows.cmake.toolchain.file=C:\vcpkg\scripts\buildsystems\vcpkg.cmake ^
          -Dwindows.cmake.build.type=RelWithDebInfo ^
          -Dwindows.build.hdfspp.dll=off ^
          -Dwindows.no.sasl=on ^
          -Duse.platformToolsetVersion=v143 ^
          -T v143
        
        if errorlevel 1 (
          echo ❌ Tests failed
          exit /b 1
        )
        
        echo ✅ Tests completed successfully

    - name: Create Distribution Package
      shell: bash
      working-directory: ${{ env.HADOOP_SOURCE_DIR }}
      run: |
        echo "=== Creating Distribution Package ==="
        
        export IS_WINDOWS=1
        export MVN_ARGS="-Dshell-executable=/c/Program\ Files/Git/bin/bash.exe -Dhttps.protocols=TLSv1.2 -Pnative-win -Dskip.platformToolsetDetection -Drequire.openssl -Dopenssl.prefix=C:/vcpkg/installed/x64-windows -Dcmake.prefix.path=C:/vcpkg/installed/x64-windows -Dwindows.cmake.toolchain.file=C:/vcpkg/scripts/buildsystems/vcpkg.cmake -Dwindows.cmake.build.type=RelWithDebInfo -Dwindows.build.hdfspp.dll=off -Duse.platformToolsetVersion=v143 -Dwindows.no.sasl=on -DskipTests -DskipDocs -Drequire.test.libhadoop"
        
        if [ -f "./dev-support/bin/create-release" ]; then
          echo "Creating release using create-release script..."
          ./dev-support/bin/create-release --mvnargs="$MVN_ARGS"
        else
          echo "⚠️ create-release script not found, skipping tarball creation"
        fi
        
        echo "✅ Distribution package creation completed"

    - name: Verify Build Artifacts
      working-directory: ${{ env.HADOOP_SOURCE_DIR }}
      run: |
        Write-Host "=== Verifying Build Artifacts ==="
        
        $distDir = "hadoop-dist\target"
        
        if (Test-Path $distDir) {
          Write-Host "Distribution directory contents:"
          Get-ChildItem $distDir -Recurse -Include "*.tar.gz", "*.zip" | ForEach-Object {
            Write-Host "  📦 $($_.Name) ($($_.Length) bytes)"
          }
        } else {
          Write-Host "❌ Distribution directory not found: $distDir"
        }
        
        # Verify native libraries
        $nativeDir = "hadoop-common-project\hadoop-common\target\native"
        if (Test-Path $nativeDir) {
          Write-Host "Native libraries found:"
          Get-ChildItem $nativeDir -Recurse -Include "*.dll", "*.lib" | ForEach-Object {
            Write-Host "  🔧 $($_.Name)"
          }
        }

    - name: Organize Build Artifacts
      shell: bash
      run: |
        echo "=== Organizing Build Artifacts ==="
        
        # Create artifacts directory structure
        mkdir -p artifacts-repo/builds/windows/
        TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
        BUILD_DIR="artifacts-repo/builds/windows/hadoop-${HADOOP_VERSION}-${TIMESTAMP}-${HADOOP_COMMIT:0:8}"
        mkdir -p "$BUILD_DIR"
        
        # Copy build artifacts
        HADOOP_DIST_DIR="${HADOOP_SOURCE_DIR}/hadoop-dist/target"
        
        if ls "${HADOOP_DIST_DIR}"/*.tar.gz 1> /dev/null 2>&1; then
          cp "${HADOOP_DIST_DIR}"/*.tar.gz "$BUILD_DIR/"
          echo "✅ Copied tar.gz files"
        fi
        
        if ls "${HADOOP_DIST_DIR}"/*.zip 1> /dev/null 2>&1; then
          cp "${HADOOP_DIST_DIR}"/*.zip "$BUILD_DIR/"
          echo "✅ Copied zip files"
        fi
        
        # Create detailed build metadata
        cat > "$BUILD_DIR/build-info.json" << EOF
        {
          "build_timestamp": "$TIMESTAMP",
          "hadoop_version": "$HADOOP_VERSION",
          "hadoop_commit": "$HADOOP_COMMIT",
          "hadoop_branch": "$HADOOP_BRANCH",
          "hadoop_repository": "$HADOOP_REPO",
          "build_type": "$BUILD_TYPE",
          "java_version": "$JAVA_VERSION",
          "maven_version": "$MAVEN_VERSION",
          "runner_os": "windows-latest",
          "workflow_run_id": "${{ github.run_id }}",
          "workflow_run_number": "${{ github.run_number }}",
          "workflow_run_url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
          "vcpkg_commit": "$VCPKG_COMMIT",
          "boost_version": "$BOOST_VERSION",
          "protobuf_version": "$PROTOBUF_VERSION",
          "build_features": {
            "native_windows": true,
            "openssl_support": true,
            "yarn_ui": true,
            "tests_skipped": $SKIP_TESTS
          }
        }
        EOF
        
        # Create build log summary
        cat > "$BUILD_DIR/build-summary.md" << EOF
        # Hadoop Windows Build Summary
        
        ## Build Information
        - **Version**: $HADOOP_VERSION
        - **Timestamp**: $TIMESTAMP
        - **Commit**: $HADOOP_COMMIT
        - **Branch**: $HADOOP_BRANCH
        - **Java Version**: $JAVA_VERSION
        - **Build Type**: $BUILD_TYPE
        
        ## Build Configuration
        - Native Windows build: ✅ Enabled
        - OpenSSL support: ✅ Enabled
        - YARN UI: ✅ Enabled
        - Tests: $([ "$SKIP_TESTS" = "true" ] && echo "⏭️ Skipped" || echo "✅ Executed")
        
        ## Dependencies
        - vcpkg commit: $VCPKG_COMMIT
        - Boost version: $BOOST_VERSION
        - Protobuf version: $PROTOBUF_VERSION
        - Maven version: $MAVEN_VERSION
        
        ## Artifacts
        $(ls "$BUILD_DIR"/*.tar.gz "$BUILD_DIR"/*.zip 2>/dev/null | sed 's/.*\//- /' || echo "- No distribution archives found")
        EOF
        
        echo "BUILD_DIR_NAME=$(basename $BUILD_DIR)" >> $GITHUB_ENV
        echo "✅ Build artifacts organized in: $BUILD_DIR"

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: hadoop-windows-build-${{ env.HADOOP_VERSION }}-${{ env.HADOOP_COMMIT }}
        path: |
          ${{ env.HADOOP_SOURCE_DIR }}/hadoop-dist/target/*.tar.gz
          ${{ env.HADOOP_SOURCE_DIR }}/hadoop-dist/target/*.zip
        retention-days: 90
        if-no-files-found: warn

    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always() && env.SKIP_TESTS == 'false'
      with:
        name: test-results-${{ env.HADOOP_VERSION }}-${{ env.HADOOP_COMMIT }}
        path: |
          ${{ env.HADOOP_SOURCE_DIR }}/**/target/surefire-reports/*.xml
          ${{ env.HADOOP_SOURCE_DIR }}/**/target/failsafe-reports/*.xml
        retention-days: 30
        if-no-files-found: warn

    - name: Commit Artifacts to Repository
      if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
      run: |
        cd artifacts-repo
        
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        git add builds/
        
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Add Hadoop ${{ env.HADOOP_VERSION }} Windows build
          
          - Version: ${{ env.HADOOP_VERSION }}
          - Commit: ${{ env.HADOOP_COMMIT }}
          - Java: ${{ env.JAVA_VERSION }}
          - Branch: ${{ env.HADOOP_BRANCH }}
          - Build: ${{ env.BUILD_DIR_NAME }}"
          
          git push
          echo "✅ Artifacts committed to repository"
        fi

    - name: Generate Build Summary
      if: always()
      run: |
        Write-Host "=== Generating Build Summary ==="
        
        $summary = @"
        ## 🏗️ Hadoop Windows Build Summary
        
        ### 📋 Build Information
        | Property | Value |
        |----------|-------|
        | **Repository** | ${{ env.HADOOP_REPO }} |
        | **Branch/Tag** | ${{ env.HADOOP_BRANCH }} |
        | **Commit** | ${{ env.HADOOP_COMMIT }} |
        | **Version** | ${{ env.HADOOP_VERSION }} |
        | **Java Version** | ${{ env.JAVA_VERSION }} |
        | **Build Type** | ${{ env.BUILD_TYPE }} |
        
        ### 🛠️ Environment Details
        | Component | Version |
        |-----------|---------|
        | **OS** | Windows Server 2022 |
        | **Java** | ${{ env.JAVA_VERSION }} (Temurin) |
        | **Maven** | ${{ env.MAVEN_VERSION }} |
        | **vcpkg** | ${{ env.VCPKG_COMMIT }} |
        | **Boost** | ${{ env.BOOST_VERSION }} |
        | **Protobuf** | ${{ env.PROTOBUF_VERSION }} |
        
        ### ⚙️ Build Configuration
        - ✅ Native Windows build enabled
        - ✅ OpenSSL support included
        - ✅ YARN UI v2 enabled
        - $(if ($env:SKIP_TESTS -eq 'true') { '⏭️ Tests skipped' } else { '✅ Tests executed' })
        - 🔧 Used VS 2022 toolset (v143)
        - 📁 Built in optimized path: ${{ env.HADOOP_BUILD_DIR }}
        
        ### 📦 Artifacts
        "@
        
        if (Test-Path "${{ env.HADOOP_SOURCE_DIR }}\hadoop-dist\target\*.tar.gz") {
          $summary += "`n- ✅ Distribution tarball created"
        } else {
          $summary += "`n- ❌ Distribution tarball not found"
        }
        
        if (Test-Path "${{ env.HADOOP_SOURCE_DIR }}\hadoop-dist\target\*.zip") {
          $summary += "`n- ✅ Distribution zip created"
        } else {
          $summary += "`n- ❌ Distribution zip not found"
        }
        
        $summary += "`n- 🗂️ Artifacts stored in: ${{ env.BUILD_DIR_NAME }}"
        
        # Write to GitHub Step Summary
        $summary | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8

  # Compatibility check job for pull requests
  compatibility-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install API Compatibility Checker
      run: |
        echo "=== Installing API Compatibility Tools ==="
        # Install tools for compatibility checking
        sudo apt-get update
        sudo apt-get install -y python3-pip
        pip3 install --user japicmp-maven-plugin || true
        echo "✅ Compatibility tools installed"

    - name: Basic Compatibility Validation
      run: |
        echo "=== Running Basic Compatibility Validation ==="
        
        # Validate workflow file syntax
        echo "Validating workflow syntax..."
        if command -v yamllint &> /dev/null; then
          yamllint .github/workflows/*.yml || echo "yamllint not available"
        fi
        
        # Check for common compatibility issues
        echo "Checking for potential compatibility issues..."
        
        # Check Java version compatibility
        if [ "${{ env.JAVA_VERSION }}" = "8" ]; then
          echo "⚠️ Using Java 8 - consider upgrading for better compatibility"
        else
          echo "✅ Using modern Java version: ${{ env.JAVA_VERSION }}"
        fi
        
        echo "✅ Basic compatibility validation completed"
