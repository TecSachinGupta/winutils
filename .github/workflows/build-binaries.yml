name: Multi-Version Hadoop Build Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      versions:
        description: 'Hadoop versions to build (comma-separated, e.g., "3.4.1,3.3.6,trunk")'
        required: false
        default: '3.4.1,3.3.6'
      platforms:
        description: 'Platforms to build on (comma-separated: windows,ubuntu,macos)'
        required: false
        default: 'windows,ubuntu'
        type: choice
        options:
          - 'ubuntu'
          - 'windows'
          - 'macos'
          - 'ubuntu,windows'
          - 'ubuntu,macos'
          - 'windows,macos'
          - 'ubuntu,windows,macos'
          - 'windows,ubuntu'
      java_versions:
        description: 'Java versions (comma-separated, e.g., "8,11,17")'
        required: false
        default: '11'
      hadoop_repo:
        description: 'Hadoop repository URL'
        required: false
        default: 'https://github.com/apache/hadoop.git'
      build_native:
        description: 'Build native components'
        required: false
        default: false
        type: boolean
      skip_tests:
        description: 'Skip tests during build'
        required: false
        default: true
        type: boolean
      parallel_jobs:
        description: 'Maximum parallel jobs'
        required: false
        default: '6'
        type: choice
        options:
          - '2'
          - '4'
          - '6'
          - '8'
          - '10'

env:
  # Default configurations - Windows first with Hadoop 3.4.1
  DEFAULT_VERSIONS: '3.4.1,3.3.6'
  DEFAULT_PLATFORMS: 'windows,ubuntu'
  DEFAULT_JAVA_VERSIONS: '11'
  DEFAULT_REPO: 'https://github.com/apache/hadoop.git'
  
  # Build optimization
  MAVEN_OPTS: '-Xmx4096M -Xss512M -XX:MaxMetaspaceSize=512M'
  MAVEN_CLI_OPTS: '--batch-mode --no-transfer-progress'

jobs:
  # Job to parse inputs and create build matrix
  prepare-matrix:
    runs-on: ubuntu-22.04
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
      total-jobs: ${{ steps.matrix.outputs.total-jobs }}
    steps:
    - name: Generate Build Matrix
      id: matrix
      run: |
        set -e
        
        echo "=== Generating Build Matrix ==="
        
        # Parse input parameters or use defaults
        VERSIONS="${{ github.event.inputs.versions || env.DEFAULT_VERSIONS }}"
        PLATFORMS="${{ github.event.inputs.platforms || env.DEFAULT_PLATFORMS }}"
        JAVA_VERSIONS="${{ github.event.inputs.java_versions || env.DEFAULT_JAVA_VERSIONS }}"
        REPO="${{ github.event.inputs.hadoop_repo || env.DEFAULT_REPO }}"
        BUILD_NATIVE="${{ github.event.inputs.build_native || 'false' }}"
        SKIP_TESTS="${{ github.event.inputs.skip_tests || 'true' }}"
        
        echo "=== Input Parameters ==="
        echo "Versions: '$VERSIONS'"
        echo "Platforms: '$PLATFORMS'"
        echo "Java Versions: '$JAVA_VERSIONS'"
        echo "Repository: '$REPO'"
        echo "Build Native: '$BUILD_NATIVE'"
        echo "Skip Tests: '$SKIP_TESTS'"
        echo ""
        
        # Install jq if not available
        if ! command -v jq >/dev/null 2>&1; then
          echo "Installing jq..."
          sudo apt-get update -qq
          sudo apt-get install -y jq
        fi
        
        # Function to convert version to branch/tag
        version_to_branch() {
          local version="$1"
          case "$version" in
            trunk|master) echo "trunk" ;;
            *-SNAPSHOT) echo "trunk" ;;
            3.0.*) echo "branch-3.0" ;;
            3.1.*) echo "branch-3.1" ;;
            3.2.*) echo "branch-3.2" ;;
            3.3.*) echo "branch-3.3" ;;
            3.4.*) echo "branch-3.4" ;;
            3.5.*) echo "branch-3.5" ;;
            4.*) echo "branch-4" ;;
            *) echo "rel/release-$version" ;;
          esac
        }
        
        # Function to get runner for platform
        get_runner() {
          local platform="$1"
          case "$platform" in
            ubuntu) echo "ubuntu-22.04" ;;
            windows) echo "windows-2022" ;;
            macos) echo "macos-12" ;;
            *) echo "ubuntu-22.04" ;;
          esac
        }
        
        # Function to determine if native build should be attempted
        should_build_native() {
          local platform="$1"
          local version="$2"
          local build_native="$3"
          
          if [[ "$build_native" == "false" ]]; then
            echo "false"
            return
          fi
          
          # Native builds are more reliable on Linux
          if [[ "$platform" == "ubuntu" ]]; then
            echo "true"
          elif [[ "$platform" == "macos" ]]; then
            echo "true"
          else
            # Windows native builds are challenging, especially for newer versions
            case "$version" in
              3.5.*|4.*|*-SNAPSHOT|trunk) echo "false" ;;
              *) echo "auto" ;;
            esac
          fi
        }
        
        # Process arrays with proper handling of spaces
        echo "=== Processing Arrays ==="
        
        # Convert comma-separated strings to arrays - simpler approach
        VERSIONS_CLEAN=$(echo "$VERSIONS" | tr ',' ' ')
        PLATFORMS_CLEAN=$(echo "$PLATFORMS" | tr ',' ' ')
        JAVA_VERSIONS_CLEAN=$(echo "$JAVA_VERSIONS" | tr ',' ' ')
        
        echo "Version array: $VERSIONS_CLEAN"
        echo "Platform array: $PLATFORMS_CLEAN"
        echo "Java array: $JAVA_VERSIONS_CLEAN"
        echo ""
        
        # Create temporary file for building JSON manually
        TEMP_FILE=$(mktemp)
        echo "[" > "$TEMP_FILE"
        
        total_jobs=0
        first_entry=true
        
        # Generate matrix entries - simplified approach
        echo "=== Generating Matrix Entries ==="
        
        for version in $VERSIONS_CLEAN; do
          version=$(echo "$version" | xargs)  # trim whitespace
          if [[ -z "$version" ]]; then
            continue
          fi
          
          branch=$(version_to_branch "$version")
          echo "Processing version: '$version' -> branch: '$branch'"
          
          for platform in $PLATFORMS_CLEAN; do
            platform=$(echo "$platform" | xargs)  # trim whitespace
            if [[ -z "$platform" ]]; then
              continue
            fi
            
            runner=$(get_runner "$platform")
            echo "  Processing platform: '$platform' -> runner: '$runner'"
            
            for java_version in $JAVA_VERSIONS_CLEAN; do
              java_version=$(echo "$java_version" | xargs)  # trim whitespace
              if [[ -z "$java_version" ]]; then
                continue
              fi
              
              native_build=$(should_build_native "$platform" "$version" "$BUILD_NATIVE")
              echo "    Processing Java: '$java_version' -> native: '$native_build'"
              
              # Add comma separator if not first entry
              if [[ "$first_entry" != "true" ]]; then
                echo "," >> "$TEMP_FILE"
              fi
              first_entry=false
              
              # Create JSON object manually to avoid jq issues
              cat >> "$TEMP_FILE" << EOF
    {
      "version": "$version",
      "branch": "$branch",
      "platform": "$platform",
      "runner": "$runner",
      "java_version": "$java_version",
      "repository": "$REPO",
      "build_native": "$native_build",
      "skip_tests": "$SKIP_TESTS"
    }EOF
              
              ((total_jobs++))
              echo "      Created entry $total_jobs"
            done
          done
        done
        
        echo "]" >> "$TEMP_FILE"
        
        # Read the generated JSON
        matrix_json=$(cat "$TEMP_FILE")
        rm -f "$TEMP_FILE"
        
        echo "Total jobs generated: $total_jobs"
        echo "Matrix JSON preview:"
        echo "$matrix_json" | jq '.[0] // empty' 2>/dev/null || echo "Could not preview JSON"
        
        # Validate JSON and ensure we have at least one job
        if [[ $total_jobs -eq 0 ]] || ! echo "$matrix_json" | jq empty 2>/dev/null; then
          echo "❌ No valid matrix entries generated, using fallback"
          matrix_json='[{"version":"3.4.1","branch":"branch-3.4","platform":"windows","runner":"windows-2022","java_version":"11","repository":"https://github.com/apache/hadoop.git","build_native":"false","skip_tests":"true"}]'
          total_jobs=1
        else
          echo "✅ Matrix JSON is valid with $total_jobs entries"
        fi
        
        # Escape the JSON properly for GitHub Actions output
        matrix_output=$(echo "$matrix_json" | jq -c .)
        
        # Output for GitHub Actions
        {
          echo "matrix={\"include\":$matrix_output}"
          echo "total-jobs=$total_jobs"
        } >> "$GITHUB_OUTPUT"
        
        echo "=== Matrix Generation Complete ==="

  # Validation job to check inputs and repository access
  validate-inputs:
    runs-on: ubuntu-22.04
    needs: prepare-matrix
    if: needs.prepare-matrix.outputs.total-jobs > 0
    steps:
    - name: Validate Configuration
      run: |
        set -euo pipefail
        
        echo "=== Validating Build Configuration ==="
        echo "Total jobs to run: ${{ needs.prepare-matrix.outputs.total-jobs }}"
        
        # Validate repository access
        REPO="${{ github.event.inputs.hadoop_repo || env.DEFAULT_REPO }}"
        echo "Validating repository access: $REPO"
        
        # Check repository accessibility with timeout
        if timeout 30s git ls-remote --heads "$REPO" >/dev/null 2>&1; then
          echo "✅ Repository access validated"
        else
          echo "❌ Repository access failed or timed out"
          echo "This may cause builds to fail. Please check the repository URL."
          # Don't fail validation for repository issues - let builds handle it
        fi
        
        # Check job limits
        MAX_JOBS="${{ github.event.inputs.parallel_jobs || '6' }}"
        TOTAL_JOBS="${{ needs.prepare-matrix.outputs.total-jobs }}"
        
        if [[ $TOTAL_JOBS -gt $MAX_JOBS ]]; then
          echo "⚠️ Warning: $TOTAL_JOBS jobs requested, but limit is $MAX_JOBS"
          echo "Jobs will be queued and run in batches."
        fi
        
        echo "✅ Configuration validation completed"

  # Main build job with matrix strategy
  build-hadoop:
    runs-on: ${{ matrix.runner }}
    needs: [prepare-matrix, validate-inputs]
    if: needs.prepare-matrix.outputs.total-jobs > 0
    timeout-minutes: 240
    
    strategy:
      fail-fast: false
      max-parallel: ${{ fromJson(github.event.inputs.parallel_jobs || '6') }}
      matrix: ${{ fromJson(needs.prepare-matrix.outputs.matrix) }}
    
    env:
      HADOOP_VERSION: ${{ matrix.version }}
      HADOOP_BRANCH: ${{ matrix.branch }}
      HADOOP_REPO: ${{ matrix.repository }}
      JAVA_VERSION: ${{ matrix.java_version }}
      BUILD_NATIVE: ${{ matrix.build_native }}
      SKIP_TESTS: ${{ matrix.skip_tests }}
      PLATFORM: ${{ matrix.platform }}
      BUILD_DIR: ${{ github.workspace }}/hadoop-build-${{ matrix.version }}-${{ matrix.platform }}-java${{ matrix.java_version }}
    
    steps:
    - name: Setup Build Environment
      shell: bash
      run: |
        set -euo pipefail
        
        echo "=== Setting up Build Environment ==="
        echo "Platform: ${{ matrix.platform }}"
        echo "Runner: ${{ matrix.runner }}"
        echo "Hadoop Version: ${{ matrix.version }}"
        echo "Branch: ${{ matrix.branch }}"
        echo "Java Version: ${{ matrix.java_version }}"
        echo "Build Native: ${{ matrix.build_native }}"
        echo "Skip Tests: ${{ matrix.skip_tests }}"
        echo "Build Directory: $BUILD_DIR"
        
        # Create build directory
        mkdir -p "$BUILD_DIR"
        
        # Set platform-specific configurations
        case "${{ matrix.platform }}" in
          windows)
            echo "IS_WINDOWS=true" >> "$GITHUB_ENV"
            echo "MAVEN_OPTS=-Xmx4096M -Xss512M -XX:MaxMetaspaceSize=512M -Dfile.encoding=UTF-8" >> "$GITHUB_ENV"
            ;;
          macos)
            echo "IS_MACOS=true" >> "$GITHUB_ENV"
            echo "MAVEN_OPTS=-Xmx6144M -Xss512M -XX:MaxMetaspaceSize=512M" >> "$GITHUB_ENV"
            ;;
          ubuntu)
            echo "IS_LINUX=true" >> "$GITHUB_ENV"
            echo "MAVEN_OPTS=-Xmx8192M -Xss512M -XX:MaxMetaspaceSize=512M" >> "$GITHUB_ENV"
            ;;
        esac

    - name: Configure Git (Windows)
      if: matrix.platform == 'windows'
      shell: bash
      run: |
        git config --global core.longpaths true
        git config --global core.autocrlf false
        git config --global core.preloadindex true
        git config --global core.fscache true
        git config --global init.defaultBranch main

    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java_version }}
        distribution: 'temurin'
        cache: maven

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Set up Build Tools (Windows)
      if: matrix.platform == 'windows'
      shell: bash
      run: |
        echo "=== Setting up Windows Build Tools ==="
        
        # Check for Visual Studio Build Tools
        if command -v cl.exe >/dev/null 2>&1; then
          echo "✅ Visual Studio compiler found"
        else
          echo "⚠️ Visual Studio compiler not found - native builds may fail"
        fi
        
        # Set Windows-specific environment
        {
          echo "JAVA_TOOL_OPTIONS=-Dfile.encoding=UTF-8 -Djava.awt.headless=true"
          echo "HADOOP_WIN_DIR=$BUILD_DIR\\hadoop-dist"
        } >> "$GITHUB_ENV"

    - name: Set up Build Tools (macOS)
      if: matrix.platform == 'macos'
      run: |
        echo "=== Setting up macOS Build Tools ==="
        
        # Install Homebrew dependencies for native builds
        if [[ "${{ matrix.build_native }}" == "true" ]]; then
          brew install cmake pkg-config openssl zlib snappy lz4 zstd
        fi

    - name: Set up Build Tools (Ubuntu)
      if: matrix.platform == 'ubuntu'
      run: |
        set -euo pipefail
        
        echo "=== Setting up Ubuntu Build Tools ==="
        
        # Update package lists
        sudo apt-get update -qq
        
        # Install essential build tools
        sudo apt-get install -y \
          build-essential \
          cmake \
          pkg-config \
          libssl-dev \
          zlib1g-dev \
          libbz2-dev \
          libffi-dev \
          liblzma-dev \
          libxml2-dev \
          libxslt1-dev
        
        # Install native dependencies if needed
        if [[ "${{ matrix.build_native }}" == "true" ]]; then
          sudo apt-get install -y \
            libsnappy-dev \
            libzstd-dev \
            liblz4-dev \
            libsasl2-dev \
            libcurl4-openssl-dev \
            libprotobuf-dev \
            protobuf-compiler
          echo "✅ Native build dependencies installed"
        fi

    - name: Validate Build Environment
      shell: bash
      run: |
        set -euo pipefail
        
        echo "=== Validating Build Environment ==="
        
        echo "System Information:"
        echo "- OS: ${{ matrix.platform }}"
        echo "- Runner: ${{ matrix.runner }}"
        echo "- Architecture: $(uname -m 2>/dev/null || echo 'unknown')"
        
        echo ""
        echo "Java Configuration:"
        java -version
        echo "JAVA_HOME: ${JAVA_HOME:-'not set'}"
        
        echo ""
        echo "Maven Configuration:"
        mvn --version
        echo "MAVEN_OPTS: ${MAVEN_OPTS:-'not set'}"
        
        echo ""
        echo "Build Configuration:"
        echo "- Hadoop Version: ${{ matrix.version }}"
        echo "- Build Native: ${{ matrix.build_native }}"
        echo "- Skip Tests: ${{ matrix.skip_tests }}"
        echo "- Build Directory: $BUILD_DIR"
        
        # Check available disk space
        if command -v df >/dev/null 2>&1; then
          echo ""
          echo "Available disk space:"
          df -h . 2>/dev/null || echo "Could not check disk space"
        fi
        
        echo "✅ Environment validation completed"

    - name: Clone Hadoop Repository
      shell: bash
      run: |
        set -euo pipefail
        
        echo "=== Cloning Hadoop Repository ==="
        echo "Repository: $HADOOP_REPO"
        echo "Branch: $HADOOP_BRANCH"
        echo "Target: $BUILD_DIR"
        
        # Clone with optimized settings and retry logic
        max_attempts=3
        attempt=1
        
        while [ $attempt -le $max_attempts ]; do
          echo "Attempt $attempt of $max_attempts..."
          
          if git clone \
            --depth 50 \
            --branch "$HADOOP_BRANCH" \
            --single-branch \
            --filter=blob:none \
            "$HADOOP_REPO" \
            "$BUILD_DIR"; then
            break
          fi
          
          if [ $attempt -eq $max_attempts ]; then
            echo "❌ Failed to clone repository after $max_attempts attempts"
            exit 1
          fi
          
          ((attempt++))
          echo "Retrying in 10 seconds..."
          sleep 10
        done
        
        cd "$BUILD_DIR"
        
        # Get commit info
        COMMIT=$(git rev-parse HEAD)
        echo "HADOOP_COMMIT=$COMMIT" >> "$GITHUB_ENV"
        
        echo "✅ Repository cloned successfully"
        echo "Commit: $COMMIT"

    - name: Detect Hadoop Version
      shell: bash
      working-directory: ${{ env.BUILD_DIR }}
      run: |
        set -euo pipefail
        
        echo "=== Detecting Hadoop Version ==="
        
        VERSION=""
        
        # Try Maven first
        if [[ -f pom.xml ]]; then
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout 2>/dev/null | grep -E '^[0-9]+\.[0-9]+\.[0-9]+' | head -1 || true)
        fi
        
        # Fallback to pom.xml parsing
        if [[ -z "$VERSION" && -f pom.xml ]]; then
          VERSION=$(grep -E '<version>[0-9]+\.[0-9]+\.[0-9]+' pom.xml | head -1 | sed 's/.*<version>\([^<]*\)<\/version>.*/\1/' || true)
        fi
        
        # Final fallback
        if [[ -z "$VERSION" ]]; then
          VERSION="${{ matrix.version }}"
        fi
        
        echo "DETECTED_HADOOP_VERSION=$VERSION" >> "$GITHUB_ENV"
        echo "✅ Detected Hadoop Version: $VERSION"

    - name: Cache Maven Dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.m2/repository
          !~/.m2/repository/org/apache/hadoop
        key: ${{ runner.os }}-maven-java${{ matrix.java_version }}-hadoop-${{ env.DETECTED_HADOOP_VERSION }}-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-java${{ matrix.java_version }}-hadoop-${{ env.DETECTED_HADOOP_VERSION }}-
          ${{ runner.os }}-maven-java${{ matrix.java_version }}-hadoop-
          ${{ runner.os }}-maven-java${{ matrix.java_version }}-
          ${{ runner.os }}-maven-

    - name: Build Hadoop
      shell: bash
      working-directory: ${{ env.BUILD_DIR }}
      run: |
        set -euo pipefail
        
        echo "=== Building Hadoop ${{ env.DETECTED_HADOOP_VERSION }} ==="
        
        # Set build flags
        BUILD_FLAGS=(
          "clean"
          "package"
          "-Dhttps.protocols=TLSv1.2"
          "$MAVEN_CLI_OPTS"
          "-Pdist"
          "-Dtar"
          "-Dmaven.javadoc.skip=true"
          "-Dmaven.source.skip=true"
          "--fail-at-end"
          "-T" "1C"
        )
        
        # Test configuration
        if [[ "$SKIP_TESTS" == "true" ]]; then
          BUILD_FLAGS+=("-DskipTests" "-Dmaven.test.skip=true")
        fi
        
        # Native build configuration
        case "$BUILD_NATIVE" in
          true)
            echo "🔧 Enabling native build"
            BUILD_FLAGS+=("-Pnative")
            ;;
          false)
            echo "🔧 Disabling native build"
            BUILD_FLAGS+=("-Dnative=false" "-Drequire.libhadoop=false" "-Drequire.snappy=false" "-Drequire.openssl=false")
            ;;
          auto)
            echo "🔧 Auto-detecting native capabilities"
            ;;
        esac
        
        # Platform-specific configurations
        case "${{ matrix.platform }}" in
          windows)
            BUILD_FLAGS+=(
              "-Dplatform.name=win32"
              "-Dhadoop.skip.shaded.check=true"
              "-Denforcer.skip=true"
              "-pl" "!hadoop-hdfs-project/hadoop-hdfs-native-client"
              "-pl" "!hadoop-yarn-project/hadoop-yarn-applications/hadoop-yarn-applications-mawo"
            )
            ;;
          macos)
            BUILD_FLAGS+=("-Dplatform.name=Mac_OS_X")
            ;;
          ubuntu)
            BUILD_FLAGS+=("-Dplatform.name=Linux")
            ;;
        esac
        
        echo "Build command: mvn ${BUILD_FLAGS[*]}"
        
        # Execute build with proper error handling
        set +e
        timeout 180m mvn "${BUILD_FLAGS[@]}" 2>&1 | tee build.log
        BUILD_EXIT_CODE=${PIPESTATUS[0]}
        set -e
        
        if [[ $BUILD_EXIT_CODE -eq 0 ]]; then
          echo "BUILD_STATUS=success" >> "$GITHUB_ENV"
          echo "✅ Build completed successfully"
        elif [[ $BUILD_EXIT_CODE -eq 124 ]]; then
          echo "BUILD_STATUS=timeout" >> "$GITHUB_ENV"
          echo "⏰ Build timed out after 3 hours"
        else
          echo "BUILD_STATUS=failed" >> "$GITHUB_ENV"
          echo "❌ Build failed with exit code: $BUILD_EXIT_CODE"
          
          # Try minimal build for Windows
          if [[ "${{ matrix.platform }}" == "windows" ]]; then
            echo "🔄 Attempting minimal Windows build..."
            set +e
            mvn package -DskipTests -Pdist -Dtar -Dnative=false -Dmaven.javadoc.skip=true --fail-never 2>&1 | tee minimal-build.log
            MINIMAL_EXIT_CODE=$?
            set -e
            
            if [[ $MINIMAL_EXIT_CODE -eq 0 ]]; then
              echo "BUILD_STATUS=partial_success" >> "$GITHUB_ENV"
              echo "⚠️ Minimal build succeeded"
            fi
          fi
        fi

    - name: Run Tests
      if: env.SKIP_TESTS == 'false'
      shell: bash
      working-directory: ${{ env.BUILD_DIR }}
      run: |
        set -euo pipefail
        
        echo "=== Running Hadoop Tests ==="
        
        # Run essential tests only to avoid timeouts
        TEST_FLAGS=(
          "test"
          "$MAVEN_CLI_OPTS"
          "-Dmaven.test.failure.ignore=true"
          "-Dtest=**/TestFileUtil.java,**/TestConfiguration.java"
        )
        
        set +e
        timeout 60m mvn "${TEST_FLAGS[@]}" 2>&1 | tee test.log
        TEST_EXIT_CODE=${PIPESTATUS[0]}
        set -e
        
        if [[ $TEST_EXIT_CODE -eq 0 ]]; then
          echo "TEST_STATUS=passed" >> "$GITHUB_ENV"
          echo "✅ Tests passed"
        elif [[ $TEST_EXIT_CODE -eq 124 ]]; then
          echo "TEST_STATUS=timeout" >> "$GITHUB_ENV"
          echo "⏰ Tests timed out"
        else
          echo "TEST_STATUS=failed" >> "$GITHUB_ENV"
          echo "⚠️ Some tests failed (exit code: $TEST_EXIT_CODE)"
        fi

    - name: Analyze Build Artifacts
      shell: bash
      working-directory: ${{ env.BUILD_DIR }}
      run: |
        set -euo pipefail
        
        echo "=== Analyzing Build Artifacts ==="
        
        ARTIFACTS_FOUND=false
        NATIVE_LIBS_FOUND=false
        
        # Look for distribution artifacts
        if [[ -d "hadoop-dist/target" ]]; then
          DIST_FILES=$(find hadoop-dist/target -name "*.tar.gz" -o -name "*.zip" 2>/dev/null | head -10)
          if [[ -n "$DIST_FILES" && $(echo "$DIST_FILES" | wc -l) -gt 0 ]]; then
            ARTIFACTS_FOUND=true
            echo "📦 Distribution artifacts found:"
            echo "$DIST_FILES" | while IFS= read -r file; do
              if [[ -f "$file" ]]; then
                SIZE=$(du -h "$file" 2>/dev/null | cut -f1 || echo "unknown size")
                echo "  - $(basename "$file") ($SIZE)"
              fi
            done
          fi
        fi
        
        # Check for native libraries
        NATIVE_FILES=$(find . -name "*.so" -o -name "*.dll" -o -name "*.dylib" 2>/dev/null | head -10)
        if [[ -n "$NATIVE_FILES" && $(echo "$NATIVE_FILES" | wc -l) -gt 0 ]]; then
          NATIVE_LIBS_FOUND=true
          echo "🔧 Native libraries found:"
          echo "$NATIVE_FILES" | while IFS= read -r file; do
            echo "  - $file"
          done
        fi
        
        {
          echo "ARTIFACTS_FOUND=$ARTIFACTS_FOUND"
          echo "NATIVE_LIBS_FOUND=$NATIVE_LIBS_FOUND"
        } >> "$GITHUB_ENV"
        
        echo "✅ Artifact analysis completed"

    - name: Generate Build Report
      if: always()
      shell: bash
      working-directory: ${{ env.BUILD_DIR }}
      run: |
        set -euo pipefail
        
        echo "=== Generating Build Report ==="
        
        BUILD_STATUS="${BUILD_STATUS:-unknown}"
        TEST_STATUS="${TEST_STATUS:-skipped}"
        ARTIFACTS_FOUND="${ARTIFACTS_FOUND:-false}"
        NATIVE_LIBS_FOUND="${NATIVE_LIBS_FOUND:-false}"
        
        cat > build-report.md << EOF
# Hadoop Build Report

**Version**: ${{ env.DETECTED_HADOOP_VERSION }}
**Platform**: ${{ matrix.platform }}
**Java Version**: ${{ matrix.java_version }}
**Build Status**: ${BUILD_STATUS}
**Test Status**: ${TEST_STATUS}
**Timestamp**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')

## Configuration
- **Repository**: ${{ matrix.repository }}
- **Branch**: ${{ matrix.branch }}
- **Commit**: ${{ env.HADOOP_COMMIT }}
- **Native Build**: ${{ matrix.build_native }}
- **Skip Tests**: ${{ matrix.skip_tests }}

## Results
- **Build**: $(case "$BUILD_STATUS" in
  success) echo "✅ SUCCESS" ;;
  partial_success) echo "⚠️ PARTIAL SUCCESS" ;;
  timeout) echo "⏰ TIMEOUT" ;;
  *) echo "❌ FAILED" ;;
esac)
- **Tests**: $(case "$TEST_STATUS" in
  passed) echo "✅ PASSED" ;;
  failed) echo "⚠️ SOME FAILED" ;;
  timeout) echo "⏰ TIMEOUT" ;;
  *) echo "⏭️ SKIPPED" ;;
esac)
- **Artifacts**: $(if [[ "$ARTIFACTS_FOUND" == "true" ]]; then echo "✅ CREATED"; else echo "❌ MISSING"; fi)
- **Native Libs**: $(if [[ "$NATIVE_LIBS_FOUND" == "true" ]]; then echo "✅ PRESENT"; else echo "❌ NOT FOUND"; fi)

## Platform Notes
$(case "${{ matrix.platform }}" in
  windows) echo "- Windows builds may have limited native library support" ;;
  macos) echo "- macOS builds require Xcode command line tools" ;;
  ubuntu) echo "- Linux builds have the best native library support" ;;
esac)

## Next Steps
$(case "$BUILD_STATUS" in
  success)
    echo "1. Download and extract the distribution artifacts"
    echo "2. Configure HADOOP_HOME and PATH variables"
    echo "3. Test the installation in your target environment"
    ;;
  partial_success)
    echo "1. Review build logs for specific module failures"
    echo "2. Consider using available artifacts for development"
    echo "3. Report any critical issues to the Hadoop community"
    ;;
  timeout)
    echo "1. Consider reducing the scope of the build"
    echo "2. Build individual modules separately"
    echo "3. Use a more powerful runner if available"
    ;;
  *)
    echo "1. Review detailed build logs for error analysis"
    echo "2. Check system requirements and dependencies"
    echo "3. Consider building on a different platform"
    ;;
esac)
EOF
        
        echo "✅ Build report generated"

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      if: env.ARTIFACTS_FOUND == 'true'
      with:
        name: hadoop-${{ env.DETECTED_HADOOP_VERSION }}-${{ matrix.platform }}-java${{ matrix.java_version }}-${{ env.BUILD_STATUS }}
        path: |
          ${{ env.BUILD_DIR }}/hadoop-dist/target/*.tar.gz
          ${{ env.BUILD_DIR }}/hadoop-dist/target/*.zip
          ${{ env.BUILD_DIR }}/hadoop-dist/target/hadoop-*.jar
          ${{ env.BUILD_DIR }}/build-report.md
          ${{ env.BUILD_DIR }}/build.log
        retention-days: 30
        if-no-files-found: warn
        compression-level: 6

    - name: Upload Build Logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: logs-hadoop-${{ env.DETECTED_HADOOP_VERSION }}-${{ matrix.platform }}-java${{ matrix.java_version }}
        path: |
          ${{ env.BUILD_DIR }}/**/target/surefire-reports/
          ${{ env.BUILD_DIR }}/**/target/failsafe-reports/
          ${{ env.BUILD_DIR }}/build-report.md
          ${{ env.BUILD_DIR }}/build.log
          ${{ env.BUILD_DIR }}/test.log
          ${{ env.BUILD_DIR }}/minimal-build.log
        retention-days: 7
        if-no-files-found: ignore
        compression-level: 6

  # Summary job to collect results from all builds
  build-summary:
    runs-on: ubuntu-22.04
    needs: [prepare-matrix, build-hadoop]
    if: always()
    
    steps:
    - name: Collect Build Results
      id: collect-results
      run: |
        set -euo pipefail
        
        echo "=== Collecting Build Results ==="
        
        # Initialize counters
        TOTAL_JOBS="${{ needs.prepare-matrix.outputs.total-jobs }}"
        SUCCESS_COUNT=0
        FAILED_COUNT=0
        PARTIAL_COUNT=0
        TIMEOUT_COUNT=0
        
        # Note: In a real scenario, you would parse the build results from artifacts
        # or use a more sophisticated approach to collect job statuses
        
        echo "TOTAL_JOBS=$TOTAL_JOBS" >> "$GITHUB_OUTPUT"
        echo "SUCCESS_COUNT=$SUCCESS_COUNT" >> "$GITHUB_OUTPUT"
        echo "FAILED_COUNT=$FAILED_COUNT" >> "$GITHUB_OUTPUT"
        echo "PARTIAL_COUNT=$PARTIAL_COUNT" >> "$GITHUB_OUTPUT"
        echo "TIMEOUT_COUNT=$TIMEOUT_COUNT" >> "$GITHUB_OUTPUT"
    
    - name: Generate Overall Summary
      run: |
        set -euo pipefail
        
        echo "=== Multi-Version Hadoop Build Summary ===" >> "$GITHUB_STEP_SUMMARY"
        echo "" >> "$GITHUB_STEP_SUMMARY"
        echo "**Total Jobs**: ${{ needs.prepare-matrix.outputs.total-jobs }}" >> "$GITHUB_STEP_SUMMARY"
        echo "**Trigger**: ${{ github.event_name }}" >> "$GITHUB_STEP_SUMMARY"
        echo "**Timestamp**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> "$GITHUB_STEP_SUMMARY"
        echo "" >> "$GITHUB_STEP_SUMMARY"
        
        # Add configuration details
        echo "### Configuration" >> "$GITHUB_STEP_SUMMARY"
        echo "- **Versions**: ${{ github.event.inputs.versions || env.DEFAULT_VERSIONS }}" >> "$GITHUB_STEP_SUMMARY"
        echo "- **Platforms**: ${{ github.event.inputs.platforms || env.DEFAULT_PLATFORMS }}" >> "$GITHUB_STEP_SUMMARY"
        echo "- **Java Versions**: ${{ github.event.inputs.java_versions || env.DEFAULT_JAVA_VERSIONS }}" >> "$GITHUB_STEP_SUMMARY"
        echo "- **Build Native**: ${{ github.event.inputs.build_native || 'false' }}" >> "$GITHUB_STEP_SUMMARY"
        echo "- **Skip Tests**: ${{ github.event.inputs.skip_tests || 'true' }}" >> "$GITHUB_STEP_SUMMARY"
        echo "" >> "$GITHUB_STEP_SUMMARY"
        
        # Build results summary
        echo "### Build Results" >> "$GITHUB_STEP_SUMMARY"
        echo "Check individual job results for detailed status information." >> "$GITHUB_STEP_SUMMARY"
        echo "" >> "$GITHUB_STEP_SUMMARY"
        
        # Add workflow status badge
        if [[ "${{ needs.build-hadoop.result }}" == "success" ]]; then
          echo "🟢 **Overall Status**: All builds completed successfully" >> "$GITHUB_STEP_SUMMARY"
        elif [[ "${{ needs.build-hadoop.result }}" == "failure" ]]; then
          echo "🔴 **Overall Status**: Some builds failed" >> "$GITHUB_STEP_SUMMARY"
        else
          echo "🟡 **Overall Status**: Builds completed with mixed results" >> "$GITHUB_STEP_SUMMARY"
        fi
        echo "" >> "$GITHUB_STEP_SUMMARY"
        
        echo "### Artifacts" >> "$GITHUB_STEP_SUMMARY"
        echo "Successful builds will have their distribution packages available in the Actions artifacts section." >> "$GITHUB_STEP_SUMMARY"
        echo "" >> "$GITHUB_STEP_SUMMARY"
        
        echo "### Next Steps" >> "$GITHUB_STEP_SUMMARY"
        echo "1. **Download artifacts** from successful builds" >> "$GITHUB_STEP_SUMMARY"
        echo "2. **Review build reports** for platform-specific notes" >> "$GITHUB_STEP_SUMMARY"
        echo "3. **Test installations** in your target environments" >> "$GITHUB_STEP_SUMMARY"
        echo "4. **Report issues** to the Hadoop community if needed" >> "$GITHUB_STEP_SUMMARY"
        echo "" >> "$GITHUB_STEP_SUMMARY"
        
        echo "### Manual Re-run Instructions" >> "$GITHUB_STEP_SUMMARY"
        echo "To manually re-run specific builds:" >> "$GITHUB_STEP_SUMMARY"
        echo '```bash' >> "$GITHUB_STEP_SUMMARY"
        echo "# Re-run with different parameters:" >> "$GITHUB_STEP_SUMMARY"
        echo "# 1. Go to Actions tab -> Multi-Version Hadoop Build Pipeline" >> "$GITHUB_STEP_SUMMARY"
        echo "# 2. Click 'Run workflow'" >> "$GITHUB_STEP_SUMMARY"
        echo "# 3. Adjust parameters as needed:" >> "$GITHUB_STEP_SUMMARY"
        echo "#    - Versions: 3.4.1,3.3.6" >> "$GITHUB_STEP_SUMMARY"
        echo "#    - Platforms: windows (for Windows-only builds)" >> "$GITHUB_STEP_SUMMARY"
        echo "#    - Java Versions: 11,17 (for multiple Java versions)" >> "$GITHUB_STEP_SUMMARY"
        echo "#    - Build Native: true (if needed)" >> "$GITHUB_STEP_SUMMARY"
        echo '```' >> "$GITHUB_STEP_SUMMARY"
        echo "" >> "$GITHUB_STEP_SUMMARY"
        
        echo "### Troubleshooting" >> "$GITHUB_STEP_SUMMARY"
        echo "- **Build Failures**: Check build logs for specific error messages" >> "$GITHUB_STEP_SUMMARY"
        echo "- **Timeouts**: Consider reducing parallel jobs or building fewer versions" >> "$GITHUB_STEP_SUMMARY"
        echo "- **Native Builds**: Linux provides the most reliable native compilation" >> "$GITHUB_STEP_SUMMARY"
        echo "- **Windows Issues**: Use WSL2 or Linux containers for better compatibility" >> "$GITHUB_STEP_SUMMARY"
        echo "" >> "$GITHUB_STEP_SUMMARY"

    - name: Check Critical Failures
      if: needs.build-hadoop.result == 'failure'
      run: |
        set -euo pipefail
        
        echo "=== Checking for Critical Failures ==="
        echo "Some builds failed. Please review the individual job logs for details."
        echo "This is normal for complex multi-platform builds like Hadoop."
        echo "Focus on the platforms and versions most important to your use case."
        
        # Don't fail the workflow for partial failures
        exit 0

  # Cleanup job to manage workspace and temporary files
  cleanup:
    runs-on: ubuntu-22.04
    needs: [build-summary]
    if: always()
    
    steps:
    - name: Cleanup Notification
      run: |
        echo "=== Build Pipeline Cleanup ==="
        echo "Workflow completed. Temporary files and caches will be cleaned up automatically."
        echo "Artifacts will be retained according to the configured retention policies."
        echo ""
        echo "Retention Policies:"
        echo "- Build Artifacts: 30 days"
        echo "- Build Logs: 7 days"
        echo "- Maven Cache: Automatically managed by GitHub Actions"
