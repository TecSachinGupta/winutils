name: Build Hadoop Windows Binaries

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      hadoop_version:
        description: 'Comma-separated list of Hadoop versions (e.g., 3.3.6,3.4.1)'
        required: true
        default: '3.4.1'

env:
  # Default Hadoop versions for PR events
  DEFAULT_HADOOP_VERSIONS: '3.3.6,3.4.1'

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Set matrix from input or default
        id: set-matrix
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.hadoop_version }}" ]; then
            versions="${{ github.event.inputs.hadoop_version }}"
          else
            versions="${{ env.DEFAULT_HADOOP_VERSIONS }}"
          fi
          
          clean_versions=$(echo "$versions" | jq -c -R 'split(",") | map(gsub("^\\s+|\\s+$"; ""))')
          echo "Parsed versions: $clean_versions"
          echo "matrix={\"version\":$clean_versions}" >> $GITHUB_OUTPUT
        shell: bash

  build:
    needs: prepare
    runs-on: windows-latest
    strategy:
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}
      fail-fast: false

    steps:
      - name: Echo Hadoop version
        run: echo "Building For Hadoop ${{ matrix.version }}"

      - name: Set variables
        run: |
          echo "RELEASE_TAG=rel/release-${{ matrix.version }}" >> $env:GITHUB_ENV
          echo "DIST_VERSION=hadoop-${{ matrix.version }}" >> $env:GITHUB_ENV

      - name: Set up Java 8 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 8

      - name: Install Python 3
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2

      - name: Install Native Build Dependencies
        shell: powershell
        run: |
          # Install required build tools based on Hadoop BUILDING.txt requirements
          choco install -y maven git cmake protoc openssl zlib
          choco install -y winflexbison nasm ninja
          
          # Configure git for long paths
          git config --system core.longpaths true
          
          # Install Protocol Buffers 3.21.12 (current requirement)
          Write-Host "Installing Protocol Buffers..."
          
          # Manually install vcpkg (not available in chocolatey)
          Write-Host "Installing vcpkg manually..."
          git clone https://github.com/Microsoft/vcpkg.git C:\vcpkg
          Set-Location C:\vcpkg
          .\bootstrap-vcpkg.bat
          .\vcpkg integrate install
          
          # Set environment variables for build tools
          $env:VCPKG_ROOT = "C:\vcpkg"
          "VCPKG_ROOT=$env:VCPKG_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          
          Set-Location $env:GITHUB_WORKSPACE

      - name: Install Boost Manually (Alternative to vcpkg)
        shell: powershell
        run: |
          Write-Host "Installing Boost from pre-built binaries..."
          
          # Use vcpkg to install boost with retry logic to handle rate limiting
          Set-Location C:\vcpkg
          
          $maxRetries = 3
          $retryCount = 0
          $boostInstalled = $false
          
          while ($retryCount -lt $maxRetries -and -not $boostInstalled) {
            Write-Host "Attempting to install Boost (attempt $($retryCount + 1)/$maxRetries)..."
            
            try {
              # Add delay to avoid rate limiting
              Start-Sleep -Seconds (30 * $retryCount)
              
              # Install minimal boost components to avoid rate limiting
              $result = .\vcpkg install boost-system:x64-windows boost-filesystem:x64-windows --triplet x64-windows 2>&1
              
              if ($LASTEXITCODE -eq 0) {
                Write-Host "✓ Boost installed successfully"
                $boostInstalled = $true
                
                # Set Boost environment variables
                $env:BOOST_ROOT = "C:\vcpkg\installed\x64-windows"
                $env:BOOST_LIBRARYDIR = "C:\vcpkg\installed\x64-windows\lib"
                "BOOST_ROOT=$env:BOOST_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
                "BOOST_LIBRARYDIR=$env:BOOST_LIBRARYDIR" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
              } else {
                Write-Host "Boost installation failed, output: $result"
                $retryCount++
              }
            } catch {
              Write-Host "Boost installation failed with exception: $($_.Exception.Message)"
              $retryCount++
            }
          }
          
          if (-not $boostInstalled) {
            Write-Host "⚠ Boost installation failed after $maxRetries attempts, continuing without Boost"
            Write-Host "This may cause some native builds to fail, but basic functionality should work"
          }
          
          Set-Location $env:GITHUB_WORKSPACE

      - name: Checkout Hadoop Source Code
        uses: actions/checkout@v4
        with:
          repository: apache/hadoop
          ref: ${{ env.RELEASE_TAG }}
          path: hadoop

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-hadoop-${{ matrix.version }}-${{ hashFiles('hadoop/**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-hadoop-${{ matrix.version }}-
            ${{ runner.os }}-maven-

      - name: Find Visual Studio
        shell: powershell
        run: |
          # Locate Visual Studio vcvars64.bat using vswhere
          $vsWhere = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
          $vcVarsPath = ""
          
          if (Test-Path $vsWhere) {
            $vsPath = & $vsWhere -latest -products * -requires Microsoft.Component.MSBuild -property installationPath
            if ($vsPath) {
              $vcVarsPath = Join-Path $vsPath 'VC\Auxiliary\Build\vcvars64.bat'
            }
          }
          
          # Fallback paths for different VS installations
          if (-not $vcVarsPath -or -not (Test-Path $vcVarsPath)) {
            $fallbackPaths = @(
              "${env:ProgramFiles}\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat",
              "${env:ProgramFiles}\Microsoft Visual Studio\2022\Professional\VC\Auxiliary\Build\vcvars64.bat",
              "${env:ProgramFiles}\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvars64.bat",
              "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvars64.bat"
            )
            
            foreach ($path in $fallbackPaths) {
              if (Test-Path $path) {
                $vcVarsPath = $path
                break
              }
            }
          }
          
          if (-not $vcVarsPath -or -not (Test-Path $vcVarsPath)) {
            Write-Host "ERROR: Could not find Visual Studio vcvars64.bat"
            exit 1
          }
          
          Write-Host "Found Visual Studio vcvars64.bat at: $vcVarsPath"
          "VCVARS_PATH=$vcVarsPath" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8

      - name: Setup Build Environment
        shell: powershell
        run: |
          # Set up build environment variables based on Hadoop BUILDING.txt
          $env:JAVA_HOME = $env:JAVA_HOME_8_X64
          $env:PATH = "$env:JAVA_HOME\bin;$env:PATH"
          
          # Set Maven options with more memory for Windows builds
          $env:MAVEN_OPTS = "-Xmx4096m -Xms1024m -XX:MetaspaceSize=512m -XX:MaxMetaspaceSize=1024m"
          
          # Set platform-specific variables for Windows native builds
          $env:PLATFORM = "x64"
          $env:CMAKE_GENERATOR = "Visual Studio 17 2022"
          
          # Protocol Buffers and native library paths
          $env:PROTOBUF_HOME = "C:\ProgramData\chocolatey\lib\protoc\tools"
          $env:OPENSSL_ROOT_DIR = "C:\Program Files\OpenSSL-Win64"
          
          # Save environment for subsequent steps
          "JAVA_HOME=$env:JAVA_HOME" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          "MAVEN_OPTS=$env:MAVEN_OPTS" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          "PLATFORM=$env:PLATFORM" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          "CMAKE_GENERATOR=$env:CMAKE_GENERATOR" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          "PROTOBUF_HOME=$env:PROTOBUF_HOME" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          "OPENSSL_ROOT_DIR=$env:OPENSSL_ROOT_DIR" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          
          Write-Host "Build environment configured:"
          Write-Host "JAVA_HOME: $env:JAVA_HOME"
          Write-Host "MAVEN_OPTS: $env:MAVEN_OPTS"
          Write-Host "PLATFORM: $env:PLATFORM"
          Write-Host "CMAKE_GENERATOR: $env:CMAKE_GENERATOR"

      - name: Build Strategy 0 - Skip Dependencies and Build Essential Components Only
        shell: powershell
        run: |
          Set-Location hadoop
          Write-Host "=== Building essential components without external dependencies ==="
          
          # Try building with minimal dependencies
          $buildScript = @'
          call "%VCVARS_PATH%"
          set JAVA_HOME=%JAVA_HOME%
          set MAVEN_OPTS=%MAVEN_OPTS%
          set PLATFORM=%PLATFORM%
          mvn clean compile -DskipTests -Dmaven.javadoc.skip=true -Drequire.snappy=false -Drequire.openssl=false -Drequire.zstd=false -Drequire.boost=false
          '@
          
          $buildScript | Out-File -FilePath "build_minimal.bat" -Encoding ascii
          
          $result = cmd.exe /c "build_minimal.bat" 2>&1
          Write-Host "Minimal build output: $result"
          
          if ($LASTEXITCODE -eq 0) {
            Write-Host "✓ Minimal build succeeded"
            "MINIMAL_SUCCESS=true" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          } else {
            Write-Host "✗ Minimal build failed"
            "MINIMAL_SUCCESS=false" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          }

      - name: Build Strategy 1 - Full Native Maven Build
        shell: powershell
        run: |
          Set-Location hadoop
          Write-Host "=== Building Hadoop with native libraries (official method) ==="
          
          $buildScript = @'
          call "%VCVARS_PATH%"
          set JAVA_HOME=%JAVA_HOME%
          set MAVEN_OPTS=%MAVEN_OPTS%
          set PLATFORM=%PLATFORM%
          mvn clean package -Pnative-win -Pdist -DskipTests -Dtar -Dmaven.javadoc.skip=true -Drequire.snappy=false -Drequire.openssl=false
          '@
          
          $buildScript | Out-File -FilePath "build_native_full.bat" -Encoding ascii
          
          $result = cmd.exe /c "build_native_full.bat" 2>&1
          Write-Host "Build output: $result"
          
          if ($LASTEXITCODE -eq 0) {
            Write-Host "✓ Full native Maven build succeeded"
            "FULL_NATIVE_SUCCESS=true" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          } else {
            Write-Host "✗ Full native Maven build failed"
            "FULL_NATIVE_SUCCESS=false" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          }

      - name: Build Strategy 2 - Individual Module Builds
        shell: powershell
        run: |
          Set-Location hadoop
          Write-Host "=== Building individual modules with native support ==="
          
          $modules = @(
            "hadoop-common-project/hadoop-common",
            "hadoop-hdfs-project/hadoop-hdfs"
          )
          
          $moduleSuccess = $false
          
          foreach ($module in $modules) {
            if (Test-Path $module) {
              Write-Host "Building module: $module"
              
              $buildScript = @"
              call "%VCVARS_PATH%"
              set JAVA_HOME=%JAVA_HOME%
              set MAVEN_OPTS=%MAVEN_OPTS%
              mvn compile -pl $module -Pnative-win -DskipTests -Dmaven.javadoc.skip=true -Drequire.snappy=false -Drequire.openssl=false -q
              "@
              
              $buildScript | Out-File -FilePath "build_module.bat" -Encoding ascii
              
              $result = cmd.exe /c "build_module.bat" 2>&1
              Write-Host "Module build output: $result"
              
              if ($LASTEXITCODE -eq 0) {
                Write-Host "✓ Module $module built successfully"
                $moduleSuccess = $true
              } else {
                Write-Host "✗ Module $module build failed"
              }
            }
          }
          
          if ($moduleSuccess) {
            "MODULE_SUCCESS=true" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          } else {
            "MODULE_SUCCESS=false" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          }

      - name: Build Strategy 3 - Direct CMake with Updated Configuration
        shell: powershell
        run: |
          $nativeDir = "hadoop\hadoop-common-project\hadoop-common\src\main\native"
          if (Test-Path $nativeDir) {
            Set-Location $nativeDir
            
            Write-Host "=== Direct CMake build with modern configuration ==="
            
            # Clean any existing build
            if (Test-Path "build") { 
              Remove-Item -Recurse -Force "build" -ErrorAction SilentlyContinue
            }
            
            $buildScript = @"
            call "%VCVARS_PATH%"
            set JAVA_HOME=%JAVA_HOME%
            cmake . -B build -G "%CMAKE_GENERATOR%" -A %PLATFORM% -DJVM_ARCH_DATA_MODEL=64 -DREQUIRE_LIBWEBHDFS=OFF -DREQUIRE_SNAPPY=OFF -DREQUIRE_OPENSSL=OFF -DREQUIRE_ZSTD=OFF
            cmake --build build --config Release --parallel
            "@
            
            $buildScript | Out-File -FilePath "cmake_build.bat" -Encoding ascii
            
            $result = cmd.exe /c "cmake_build.bat" 2>&1
            Write-Host "CMake build output: $result"
            
            Set-Location $env:GITHUB_WORKSPACE
            
            if ($LASTEXITCODE -eq 0) {
              Write-Host "✓ CMake build succeeded"
              "CMAKE_SUCCESS=true" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
            } else {
              Write-Host "✗ CMake build failed"
              "CMAKE_SUCCESS=false" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
            }
          } else {
            Write-Host "✗ Native directory not found"
            "CMAKE_SUCCESS=false" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          }

      - name: Build Strategy 4 - MSBuild Winutils
        shell: powershell
        run: |
          $winutilsDir = "hadoop\hadoop-common-project\hadoop-common\src\main\winutils"
          if (Test-Path $winutilsDir) {
            Set-Location $winutilsDir
            
            Write-Host "=== Building winutils with MSBuild ==="
            
            # Look for solution or project files
            $slnFiles = Get-ChildItem -Filter "*.sln" -ErrorAction SilentlyContinue
            $vcxprojFiles = Get-ChildItem -Filter "*.vcxproj" -ErrorAction SilentlyContinue
            
            $winutilsSuccess = $false
            
            if ($slnFiles) {
              foreach ($sln in $slnFiles) {
                Write-Host "Building solution: $($sln.Name)"
                
                $buildScript = @"
                call "%VCVARS_PATH%"
                msbuild "$($sln.FullName)" /p:Configuration=Release /p:Platform=x64 /m
                "@
                
                $buildScript | Out-File -FilePath "build_sln.bat" -Encoding ascii
                
                $result = cmd.exe /c "build_sln.bat" 2>&1
                Write-Host "Solution build output: $result"
                
                if ($LASTEXITCODE -eq 0) {
                  Write-Host "✓ Solution $($sln.Name) built successfully"
                  $winutilsSuccess = $true
                } else {
                  Write-Host "✗ Solution $($sln.Name) build failed"
                }
              }
            } elseif ($vcxprojFiles) {
              foreach ($proj in $vcxprojFiles) {
                Write-Host "Building project: $($proj.Name)"
                
                $buildScript = @"
                call "%VCVARS_PATH%"
                msbuild "$($proj.FullName)" /p:Configuration=Release /p:Platform=x64
                "@
                
                $buildScript | Out-File -FilePath "build_proj.bat" -Encoding ascii
                
                $result = cmd.exe /c "build_proj.bat" 2>&1
                Write-Host "Project build output: $result"
                
                if ($LASTEXITCODE -eq 0) {
                  Write-Host "✓ Project $($proj.Name) built successfully"
                  $winutilsSuccess = $true
                } else {
                  Write-Host "✗ Project $($proj.Name) build failed"
                }
              }
            } else {
              Write-Host "✗ No Visual Studio solution or project files found"
            }
            
            Set-Location $env:GITHUB_WORKSPACE
            
            if ($winutilsSuccess) {
              "WINUTILS_SUCCESS=true" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
            } else {
              "WINUTILS_SUCCESS=false" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
            }
          } else {
            Write-Host "✗ Winutils directory not found"
            "WINUTILS_SUCCESS=false" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          }

      - name: Build Summary
        shell: powershell
        run: |
          Write-Host "=== Build Summary ==="
          Write-Host "Minimal Build: $env:MINIMAL_SUCCESS"
          Write-Host "Full Native Build: $env:FULL_NATIVE_SUCCESS"
          Write-Host "Individual Modules: $env:MODULE_SUCCESS"  
          Write-Host "CMake Direct Build: $env:CMAKE_SUCCESS"
          Write-Host "Winutils Build: $env:WINUTILS_SUCCESS"
          
          $anySuccess = ($env:MINIMAL_SUCCESS -eq "true") -or ($env:FULL_NATIVE_SUCCESS -eq "true") -or ($env:MODULE_SUCCESS -eq "true") -or ($env:CMAKE_SUCCESS -eq "true") -or ($env:WINUTILS_SUCCESS -eq "true")
          
          if ($anySuccess) {
            Write-Host "✓ At least one build strategy succeeded"
            "BUILD_SUCCESS=true" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          } else {
            Write-Host "✗ All build strategies failed"
            "BUILD_SUCCESS=false" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          }

      - name: Comprehensive Native Library Search
        shell: powershell
        run: |
          Write-Host "=== Comprehensive Search for Native Libraries ==="
          
          Set-Location hadoop
          
          # Define comprehensive search patterns
          $nativeExtensions = @("*.dll", "*.exe", "*.lib", "*.so")
          $keyFiles = @("winutils.exe", "hadoop.dll", "hdfs.dll", "libwinutils.lib", "libhadoop.lib")
          
          $foundFiles = @()
          
          # Search in target directories first
          Write-Host "Searching target directories..."
          $targetDirs = Get-ChildItem -Recurse -Directory -Name "target" -ErrorAction SilentlyContinue
          foreach ($targetDir in $targetDirs) {
            if (Test-Path $targetDir) {
              $targetFiles = Get-ChildItem -Path $targetDir -Recurse -Include $nativeExtensions -ErrorAction SilentlyContinue
              foreach ($file in $targetFiles) {
                if ($file.Name -notmatch "test|surefire|javadoc" -and $file.Length -gt 0) {
                  Write-Host "Found in target: $($file.FullName) ($($file.Length) bytes)"
                  $foundFiles += @{
                    Path = $file.FullName
                    RelativePath = $file.FullName.Replace($PWD.Path + "\", "")
                    Name = $file.Name
                    Size = $file.Length
                    Type = "target"
                  }
                }
              }
            }
          }
          
          # Search build directories
          Write-Host "Searching build directories..."
          $buildDirs = Get-ChildItem -Recurse -Directory -Name "build", "Release", "Debug", "x64" -ErrorAction SilentlyContinue
          foreach ($buildDir in $buildDirs) {
            if (Test-Path $buildDir) {
              $buildFiles = Get-ChildItem -Path $buildDir -Recurse -Include $nativeExtensions -ErrorAction SilentlyContinue
              foreach ($file in $buildFiles) {
                if ($file.Length -gt 0) {
                  Write-Host "Found in build: $($file.FullName) ($($file.Length) bytes)"
                  $foundFiles += @{
                    Path = $file.FullName
                    RelativePath = $file.FullName.Replace($PWD.Path + "\", "")
                    Name = $file.Name
                    Size = $file.Length
                    Type = "build"
                  }
                }
              }
            }
          }
          
          # Search for key files specifically
          Write-Host "Searching for key files..."
          foreach ($keyFile in $keyFiles) {
            $keyFileMatches = Get-ChildItem -Recurse -Name $keyFile -ErrorAction SilentlyContinue
            foreach ($match in $keyFileMatches) {
              $fullPath = Resolve-Path $match -ErrorAction SilentlyContinue
              if ($fullPath -and (Get-Item $fullPath).Length -gt 0) {
                Write-Host "Found key file: $fullPath"
                $foundFiles += @{
                  Path = $fullPath.Path
                  RelativePath = $match
                  Name = $keyFile
                  Size = (Get-Item $fullPath).Length
                  Type = "key"
                }
              }
            }
          }
          
          # Remove duplicates
          $uniqueFiles = $foundFiles | Sort-Object Path -Unique
          
          # Export results for next step
          $foundCount = $uniqueFiles.Count
          "NATIVE_FILES_FOUND=$foundCount" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          
          Write-Host "=== Search Summary ==="
          Write-Host "Total unique native files found: $foundCount"
          
          if ($foundCount -gt 0) {
            Write-Host "Files found:"
            foreach ($file in $uniqueFiles) {
              Write-Host "  $($file.Name) - $($file.Size) bytes - $($file.RelativePath)"
            }
            
            # Save file list for packaging
            $fileList = $uniqueFiles | ConvertTo-Json -Depth 3
            $fileList | Out-File -FilePath "$env:GITHUB_WORKSPACE\found_files.json" -Encoding UTF8
          } else {
            Write-Host "No native files found. Build may have failed completely."
            "[]" | Out-File -FilePath "$env:GITHUB_WORKSPACE\found_files.json" -Encoding UTF8
          }

      - name: Package native libraries
        shell: powershell
        run: |
          $version = "${{ matrix.version }}"
          $outputDir = "hadoop-$version-native-windows"
          
          # Create output directory structure
          New-Item -ItemType Directory -Path "$outputDir\lib\native" -Force
          New-Item -ItemType Directory -Path "$outputDir\bin" -Force
          New-Item -ItemType Directory -Path "$outputDir\sbin" -Force
          
          $filesPackaged = 0
          
          # Read found files list
          if (Test-Path "found_files.json") {
            $foundFiles = Get-Content "found_files.json" | ConvertFrom-Json
            
            Write-Host "Packaging $($foundFiles.Count) found files..."
            
            foreach ($fileInfo in $foundFiles) {
              $sourcePath = $fileInfo.Path
              $fileName = $fileInfo.Name
              
              if (Test-Path $sourcePath) {
                # Determine destination based on file type
                if ($fileName -match "\.dll$") {
                  $destPath = "$outputDir\lib\native\$fileName"
                  Write-Host "Copying DLL: $fileName"
                } elseif ($fileName -match "\.exe$") {
                  if ($fileName -match "winutils|hadoop") {
                    $destPath = "$outputDir\bin\$fileName"
                  } else {
                    $destPath = "$outputDir\sbin\$fileName"
                  }
                  Write-Host "Copying EXE: $fileName"
                } elseif ($fileName -match "\.lib$") {
                  $destPath = "$outputDir\lib\native\$fileName"
                  Write-Host "Copying LIB: $fileName"
                } else {
                  $destPath = "$outputDir\lib\native\$fileName"
                  Write-Host "Copying OTHER: $fileName"
                }
                
                Copy-Item -Path $sourcePath -Destination $destPath -Force -ErrorAction SilentlyContinue
                if (Test-Path $destPath) {
                  $filesPackaged++
                }
              }
            }
          }
          
          # Create comprehensive README
          $buildStatus = if ($filesPackaged -gt 0) { 
            "PARTIAL SUCCESS - $filesPackaged files packaged" 
          } else { 
            "BUILD FAILED - No native files found" 
          }
          
          $readme = @"
          # Hadoop $version Native Binaries for Windows
          
          **Build Date:** $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')  
          **Build Status:** $buildStatus  
          **Source:** Apache Hadoop $version (tag: ${{ env.RELEASE_TAG }})  
          **Files Packaged:** $filesPackaged
          
          ## Contents
          
          - **lib/native/**: Native libraries (.dll, .lib files)
          - **bin/**: Essential Windows utilities (winutils.exe, hadoop.exe)
          - **sbin/**: Additional system utilities
          
          ## Installation
          
          1. Extract this archive to your desired location
          2. Set environment variable: `HADOOP_HOME=<path-to-extracted-folder>`
          3. Add to PATH: `%HADOOP_HOME%\bin`
          4. Verify installation: `winutils.exe` (should show usage info)
          
          ## Build Information
          
          This package was built using multiple strategies:
          0. Minimal build without external dependencies
          1. Full native Maven build with -Pnative-win -Pdist profiles
          2. Individual module builds with native profiles  
          3. Direct CMake builds for native components
          4. MSBuild for Windows-specific utilities
          5. Comprehensive file system search for all artifacts
          
          Build Results:
          - Minimal Build: $env:MINIMAL_SUCCESS
          - Full Native Build: $env:FULL_NATIVE_SUCCESS
          - Individual Modules: $env:MODULE_SUCCESS  
          - CMake Build: $env:CMAKE_SUCCESS
          - Winutils Build: $env:WINUTILS_SUCCESS
          
          Some components may be missing if specific build strategies failed.
          Check BUILD_LOG.txt for detailed information.
          
          ## Troubleshooting
          
          If you encounter issues:
          - Ensure Visual C++ Redistributable is installed
          - Check that all .dll files are in lib/native/
          - Verify winutils.exe has execution permissions
          - See GitHub Actions logs for build details
          
          ## Notes
          
          These binaries are built from official Apache Hadoop source code.
          For production use, consider building from source in your target environment.
          "@
          
          $readme | Out-File -FilePath "$outputDir\README.md" -Encoding UTF8
          
          # Create detailed build log
          $buildLog = @"
          Hadoop $version Windows Native Build Log
          ========================================
          
          Build Environment:
          - OS: Windows Server (GitHub Actions)
          - Java: 8 (Temurin)
          - Visual Studio: 2022
          - Build Tools: Maven, CMake, MSBuild
          
          Native Files Found: $env:NATIVE_FILES_FOUND
          Files Packaged: $filesPackaged
          
          Build Strategies Attempted:
          0. Minimal build without external dependencies: $env:MINIMAL_SUCCESS
          1. Full native Maven build with -Pnative-win -Pdist: $env:FULL_NATIVE_SUCCESS
          2. Individual module builds with native profiles: $env:MODULE_SUCCESS
          3. Direct CMake build in native source directory: $env:CMAKE_SUCCESS
          4. Direct MSBuild on winutils projects: $env:WINUTILS_SUCCESS
          
          For complete build logs, refer to the GitHub Actions workflow execution.
          
          If this package is missing expected files, the build may have encountered
          platform-specific issues. Consider:
          - Using official Hadoop distributions when available
          - Building in a controlled Windows environment
          - Checking for updated build dependencies
          "@
          
          $buildLog | Out-File -FilePath "$outputDir\BUILD_LOG.txt" -Encoding UTF8
          
          # Create empty placeholder if no files found
          if ($filesPackaged -eq 0) {
            "This build did not produce native libraries. Check BUILD_LOG.txt for details." | Out-File -FilePath "$outputDir\BUILD_FAILED.txt" -Encoding UTF8
          }
          
          # Create archive
          Compress-Archive -Path $outputDir -DestinationPath "hadoop-$version-native-windows.zip" -Force
          Write-Host "Created package: hadoop-$version-native-windows.zip"
          
          # Display final package contents
          Write-Host "=== Final Package Contents ==="
          Get-ChildItem -Path $outputDir -Recurse | ForEach-Object {
            $relativePath = $_.FullName.Replace((Resolve-Path $outputDir).Path, "")
            Write-Host "  $relativePath"
          }
          
          Write-Host "=== Package Summary ==="
          Write-Host "Files successfully packaged: $filesPackaged"
          Write-Host "Archive size: $((Get-Item "hadoop-$version-native-windows.zip").Length) bytes"

      - name: Upload native libraries artifact
        uses: actions/upload-artifact@v4  
        with:
          name: hadoop-${{ matrix.version }}-native-windows
          path: hadoop-${{ matrix.version }}-native-windows.zip
          retention-days: 30

      - name: Upload build logs for debugging
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-hadoop-${{ matrix.version }}
          path: |
            found_files.json
            hadoop/**/*.log
            hadoop/**/*.bat
            hadoop/**/CMakeFiles/**/*.log
            hadoop/**/target/surefire-reports/
          retention-days: 7
